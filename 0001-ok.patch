From a873bd8030a4f0b3cfbd127bbba102ffe8b6358f Mon Sep 17 00:00:00 2001
From: user <auwsom@users.noreply.github.com>
Date: Mon, 19 May 2025 11:50:31 -0700
Subject: [PATCH] "ok"

---
 .bash_aliases | 42 +++++++++++++++++++++++++-----------------
 1 file changed, 25 insertions(+), 17 deletions(-)

diff --git a/.bash_aliases b/.bash_aliases
index bfe5b36..5d74239 100644
--- a/.bash_aliases
+++ b/.bash_aliases
@@ -7,7 +7,7 @@
 
 # see further down for more general Linux tips and learning sites.(width is 100 chars vs 80 default)
 # add to sudo -E visudo for cache across tabs.. Defaults:user   timestamp_timeout=30, !tty_tickets, timestamp_type=global
-echo $CDPATH # to see which dirs are autofound (can be annoying with tab complete)
+echo CDPATH dirs: $CDPATH # to see which dirs are autofound (can be annoying with tab complete)
 
 
 true <<'END' # skips section to next END
@@ -41,11 +41,9 @@ if ! [[ -f ~/.bash_history ]]; then ln -s ~/.bash_eternal_history ~/.bash_histor
 HISTFILE=~/.bash_eternal_history # "certain bash sessions truncate .bash_history" (like Screen) SU
 #sed -i 's,HISTFILESIZE=,HISTFILESIZE= #,' ~/.bashrc && sed -i 's,HISTSIZE=,HISTSIZE= #,' ~/.bashrc # run once for unlimited. have to clear the default setting in .bashrc
 HISTCONTROL=ignoreboth:erasedups   # no duplicate entries. ignoredups is only for consecutive. ignore both = ignoredups+ignorespace (will not record commands with space in front)
-
 #HISTTIMEFORMAT="%h %d %H:%M " # "%F %T " # adds unix epoch timestamp before each history: #1746739135. then "1836  May 08 14:21 cat .bash_history"
 #export HISTIGNORE="!(+(*\ *))" # ignores commands without arguments. not compatible with HISTTIMEFORMAT. should be the same as `grep -v -E "^\S+\s.*" $HISTFILE`
 export HISTIGNORE="c:cdb:cdh:cdu:df:i:h:hh:hhh:l:lll:lld:lsd:lsp:ltr::mount:umount:rebash:path:env:pd:ps1:sd:top:tree1:zr:zz:au:auu:aca:cu:cur:cx:dedup:dmesg:dli:aptli:d:flmh:flmho:flmr:fm:free:lsblk:na:netstat:ping1:wrapon:wrapoff:um:m:hdl" # :"ls *":"hg *" # ignore commands from history
-
 #export PROMPT_COMMAND='history -a' # ;set +m' # will save (append) unwritten history in memory every time a new shell is opened. unfortunately, it also adds duplicates before they get removed by writing to file. use cron job to erase dups. set +m makes disables job control for aliases in vi.
 #export PROMPT_COMMAND='EC=$? && history -a && test $EC -eq 1 && echo error $HISTCMD && history -d $HISTCMD && history -w' # excludes errors from history
 #export PROMPT_COMMAND='history -a ~/.bash_history_backup' # writes to backup file instead of polluting every terminal with all history. doenst work
@@ -172,10 +170,12 @@ alias ps1='ps -ef' # show processes. -e/-A all. -f full.
 alias psp='ps -Flww -p' # <PID> show info on just one process
 alias pgrep='pgrep -af' # grep processes - full, list-full. use \pgrep for just the PID.
 alias pkill='pkill -f' # kill processed - full
+
 # p for pipe `|` powerful feature of shell language. transfers command output to input next command.
 alias q='helpany' # see helpany function
-alias rm='rm -Irv ' # -I requires confirmation. -r recursive into directories. -v verbose. 
+#alias rm='rm -Irv ' # -I requires confirmation. -r recursive into directories. -v verbose. 
 # ^^^^^ maybe most helpful alias. avoids deleting unintended files. use -i to approve each deletion.
+function rm() { mkdir -p ~/0del && mv "$@" ~/0del/; } # ~/0del is trash bin. use \rm for the original command.
 function rl { readlink -f "$1"; } # function returns full path of file, very useful
 # `sed` # Stream EDitor `sed -i 's/aaa/bbb/g' file` -i inplace, replace aaa with bbb. g globally. can use any char instead of /, such as `sed -i 's,aaa,bbb,' file`. -E to use re pattern matching.
 alias sudo='sudo '; alias s='sudo '; alias sd='sudo -s ' # elevate privelege for command. see `visudo` to set. And `usermod -aG sudo add`, security caution when adding.
@@ -247,7 +247,11 @@ alias flmr='find / -type d \( -name proc -o -name sys -o -name dev -o -name run
 alias fm='findmnt' # shows mountpoints as tree. shows bind mounts.
 alias free='type free; free -h' # check memory, human readable
 # head and tail: `head -1 <file>` shows the first line. defaults to 10 lines without number.
-alias gm='guestmount -i $file -a /mnt' # set file=<vm/partition-backup> first 
+alias gm='guestmount -i $file -a /mnt # doesnt work on qcows a lot. use gm2 function' # set file=<vm/partition-backup> first 
+function gm1 { sudo modprobe nbd max_part=8 && sudo qemu-nbd --connect=/dev/nbd0 "$1" && sudo partprobe /dev/nbd0 && sudo mount /dev/nbd0p1 /mnt; }
+function gm2 { sudo modprobe nbd max_part=8 && sudo qemu-nbd --connect=/dev/nbd1 "$1" && sudo partprobe /dev/nbd1 && sudo mount /dev/nbd1p1 /mnt2; }
+alias gm1d='sudo umount /mnt && sudo qemu-nbd --disconnect /dev/nbd0'
+alias gm2d='sudo umount /mnt2 && sudo qemu-nbd --disconnect /dev/nbd1'
 # `inotifywait -m ~/.config/ -e create -e modify` (inotify-tools), watch runs every x sec, entr runs command after file changes. use examples from bottom of `man entr` `ls *.js | entr -r node app.js`
 entr1() { ls "$1" >| temp; nohup sh -c "cat temp | entr -n cp \"$1\" \"$2\"" </dev/null >/dev/null 2>&1 & disown; } # wentr file-in-pwd ~/destination/
 alias jo='journalctl' # -p,  -err, --list-boots, -b boot, -b -1 last boot, -r reverse, -k (kernel/dmesg), -f follow, --grep -g, --catalog -x (use error notes), -e goto end
@@ -295,14 +299,14 @@ alias vi='vim'
 alias wdf='watch \df' # refresh command output every 2s 
 alias wdu='watch du -cd1 .' # or `watch du -s <dir>` or `watch '\du -cd1 . | sort -n'`
 alias wget='type wget; wget --no-clobber --content-disposition --trust-server-names' # -N overwrites only if newer file and disables timestamping # or curl to download webfile (curl -JLO)
-alias wrapon='echo -ne "\033[?7h"' # line wrap on
+alias wrapon='echo -ne "\033[?7h"' # line wrap on (by default)
 alias wrapoff='echo -ne "\033[?7l"' # line wrap off
 alias xc='xclip -selection clipboard' # apt install xclip
 alias zzzr='shutdown -r now || true' # reboot in ssh, otherwise freezes
 alias zzzs='shutdown -h now || true' # shutdown in ssh, otherwise freezes
 # correct common typos
 alias unmount='umount' ; alias um='umount' ; alias mounts='mount' ; alias m='type m; printf "\033[?7l"; mount | g -v -e cgroup -e fs; printf "\033[?7h"' ; alias ma='mount -a' ; alias mg='mount | grep'; alias mr='mount -o remount,rw'; 
-alias umf='umount -l' # unmount lazy works when force doesnt
+alias umf='sudo umount -l' # unmount lazy works when force doesnt # also `fuser -m /media/user/dir` will list PIDs
 # change tty term from cli: `chvt 2`
 # https://itnext.io/what-is-linux-keyring-gnome-keyring-secret-service-and-d-bus-349df9411e67 
 # encrypt files with `gpg -c`
@@ -310,7 +314,6 @@ if [[ $(whoami) == 'root' ]]; then export TMOUT=18000 && readonly TMOUT; fi # ti
 # `sudo echo foo > /rootfile` errors.. so `echo foo | sudo tee /rootfile`. sudo doesnt pass redirect
 # other admin commands: last, w, who, whoami, users, login, uptime, free -th, mpstat, iostat, bashtop, ssh, lsof, lspci, dmesg, dbus, strace, scp, file
 
-
 ## extra stuff
 # `!!` for last command, as in `sudo !!`. `ctrl+alt+e` expand works here. `!-1:-1` for second to last arg in last command.
 # `vi $(!!)` to use output of last command. or use backticks: vi `!!`
@@ -771,15 +774,16 @@ alias gitc='git commit -m "ok"'
 alias gitph='git push'
 alias gitpl='git pull' # (git fetch && git merge) 
 alias gitac='gita && gitc' # add and commit
-alias gs='git status && git add -A && git commit -m \"ok\" && git push # git sync by push'
+alias gs='git status && git add -A && git commit -m \"ok\" && git push # git sync by push' 
 alias gitsd='pushd ~/git/dotfiles && git add . && git commit -m commit && git push -u origin main; popd' # git sync push on dotfiles dir
 alias gpho='git push -u origin main '
 alias agitinfo='# git clone is for first copy # git status, git log, git branch \# git clone https://github.com/auwsom/dotfiles.git #add ssh priv & pub key or will pull but not push
 # git clone git@github.com:auwsom/dotfiles.git # will ask to connect. need to `eval $(ssh-agent -s) && ssh-add ~/.ssh/id_rsa` checks if agent running and adds (will display email of GH account) 
 ## add from local creatJust found this tool called Briefcase to deploy python apps to 6 platforms (mac,win,linux,ios,android,web) looks great. Produces standalone binariese:
 # `apt install gh` then click enter until auth through webpage'
-alias git1='git init && git remote add origin git@github.com:auwsom/<new>.git && git branch -M main'
-alias git2='gh repo create <newrepo> --public'
+alias git1='gh repo create <newrepo> --private' # or --public
+alias git2h='git init && git remote add origin https://github.com/auwsom/<new>.git && git branch -M main' # doesnt need password everytime when using gh login 
+alias git2s='git init && git remote add origin git@github.com:auwsom/<new>.git && git branch -M main' # dont need password
 alias git3='git add . && git push --set-upstream origin main'
 # git config --global init.defaultBranch main 
 # https://www.freecodecamp.org/news/how-to-make-your-first-pull-request-on-github-3/
@@ -794,11 +798,14 @@ alias gitchkf='git checkout <commit> -- <file>' # restores a file from that comm
 alias gitsr1='keyword="replacethis"; for commit in $(git log -S "$keyword" --oneline --pretty=format:"%H"); do git grep "$keyword" "$commit"; done'
 alias gitsr2='git log --name-status --diff-filter=A --'
 
-#git conflicts:
-alias gitv1='git log HEAD..origin/main -p      # view Remote changes'
+#git resolve conflicts:
+alias gitv1='git log HEAD..origin/main -p      # view Remote changes' # can use --oneline for commit number and desc
 alias gitv2='git log origin/main..HEAD -p      # view Your changes'
-alias gitv3='git commit -m "rebase" && git pull --rebase && git push # will add local changes onto origin. doesnt merge (does rewrite history linearly) 
-
+alias gitrc1='git commit -m "rebase" && git pull --rebase && git push' # will add local changes onto origin. doesnt merge (does rewrite history linearly). 'git pull --rebase' will add markers in file of conflict. have to remove manually, then `git add $file` and `git rebase --continue` and `git push origin main --force-with-lease` or `git rebase --abort` to cancel
+# or:
+alias gitcrl='git diff origin/main -- $file # to compare'
+alias gitkr='git checkout --theirs $file && git add $file && git rebase --continue # keep remote'
+alias gitkl='git checkout --ours $file && git add $file && git rebase --continue # keep local'
 
 # mv ~/.bash_aliases ~/.bash_aliases0 && ln -s ~/git/dotfiles/.bash_aliases ~/.bash_aliases
 # to push new repo from CLI you have to create it using curl and PERSONAL_ACCESS_TOKEN.
@@ -819,8 +826,8 @@ alias gitv3='git commit -m "rebase" && git pull --rebase && git push # will add
 # `apt purge <package>` doesnt erase anything in home dir
 # list installed packages by date: `grep " install " /var/log/dpkg.log` or `apt-mark showmanual` (`apt-mark minimize-manual` supposed to unmark all dependencies) (zgrep search /var/log/dpkg.log.2.gz)
 # `apt install mlocate ncdu htop`
-# ext4magic and testdisk (extundelete defunct https://www.unix.com/fedora/279812-segmentation-fault-while-trying-recover-file-extundelete.html) ntfs keeps directory info in journal, ext4 doesnt.
-# `ntfsundelete /dev/hda1 -t 2d` Look for deleted files altered in the last two days
+# ext4magic and testdisk/photorec (extundelete defunct https://www.unix.com/fedora/279812-segmentation-fault-while-trying-recover-file-extundelete.html).
+# `ntfsundelete /dev/hda1 -t 2d` Look for deleted files altered in the last two days. partition has to be ntfs which has directory structure journaling. 
 
 # bash wildcards (glob/global): `*(pattern|optional-or) ? * + @ ! https://www.linuxjournal.com/content/bash-extended-globbing
 # `egrep "(a)(.*b)"` matches everything between a and b inclusively. 
@@ -899,6 +906,7 @@ alias qemu='qemu-system-x86_64' # --help
 # history -a; set +m # same as above but runs every command with .bashrc
 # trap 'echo ${BASH_COMMAND}' DEBUG # prints all commands 
 # trap 'type ${BASH_COMMAND[1]}' DEBUG # array doesnt work on this bash var for some reason
+# trap 'if [[ $(echo $(type ${BASH_COMMAND} | awk "{print \$1}" ) | grep builtin) ]]; then echo "this is an alias"; fi' DEBUG # prints all commands. also prints an error ?
 
 # https://stackoverflow.com/questions/27493184/can-i-create-a-wildcard-bash-alias-that-alters-any-command
 
-- 
2.34.1

