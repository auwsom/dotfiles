#!/bin/bash
set -Cex # set -o noclobber -o errexit -o xtrace (debug print) -o nounset (undec var exit -u)

filename () { echo "${fileloc##*/}"; } # chops filename from path
list_files () { ls $base/$(filename)_$1_*; } # lists all filenames in period in base dir
today=$(($(date +%s)/86400)) # converts today's date to unix epoch seconds, then days
#if [ ${#files[@]} -gt 0 ]; then echo y; fi # check if files in dir
filedateday () { echo $((${1##*_}/86400)); } # same for file's date
file_check_new () { if [[ $(($today-$(filedateday $1))) -lt 1 ]]; then echo true; fi; }
file_check_old () { if [[ $(($today - $(filedateday $1))) -gt $2 ]]; then echo true; fi; }
cmd () { rsync -aAX --info=progress2 $fileloc $base/$(filename)_day_$(date +%F--%T)_$(date +%s); }

bump () { [[ -f $base/$(filename)_$1_* ]] && for i in $(list_files $1); do if [[ $(file_check_old $i $3) ]]; then echo $1 $2 $3 && mv $i ${i/$1/$2}; fi; done } # checks if older than period and renames



cull () { [[ -f $base/$(filename)_$1_* ]] && for i in $(list_files $1); do if [[ $(file_check_old $2) ]]; then rm $i; fi; done; } # deletes if more than one per period 

cull_last () { [[ -f $base/$(filename)_$1_* ]] && for i in $(list_files $1); do if [[ $(file_check_old $2) ]]; then rm $i; fi; done; } # deletes oldest

bump_set () { case "$1" in 
  day) p1=day;p2=week;d=7;; 
  week) p1=week;p2=month;d=30;; 
  month) p1=month;p2=year;d=360;; 
  year) cull_last year 720;; 
  *) exit 1;; esac; } # sets vars for each time period
fileloc="/media/user/16GBa/TinyLinux-2018-10-28" # file to backup
base="/media/user/backups/usb" # target directory
# check if no new backup file and make one
i=$(ls -t $base/"${fileloc##*/}"_day_* | head -1); if ! [[ $(file_check_new $i) ]]; then cmd; fi
#true ${p2:=day}  
for i in day week month year; do bump_set $i; echo $p1 $p2 $d; bump $p1 $p2 $d; done # run through set vars, rename and delete

true <<'END'
bump_set () { case "$1" in 
  day) p1=day;p2=week;d=2;; 
  week) p1=week;p2=month;d=30;; 
  month) p1=month;p2=year;d=360;; 
  year) year;; 
  *) exit 1;; esac; } # sets vars for each time period
cull () { for i in $(list_files year); do if [[ $(file_check_old 720) ]]; then rm $i; fi; done; } # deletes oldest
fileloc="/media/user/backups/backup-work"
base="/media/user/VM/ubuntu-20.04-server-cloudimg-amd64-disk-kvm--kub-set3--work-bak2.qcow2"
# check if no new backup file and make one
i=$(ls -t $base/"${fileloc##*/}"_day_* | head -1); if ! [[ $(file_check_new $i) ]]; then cmd; fi
#true ${p2:=day} 
for i in day week month year; do bump_set $i; echo $p1 $p2 $d; bump $p1 $p2 $d; done # run through set vars, rename and delete


# Keep only one copy per period
day () { for i in $(ls $base/"$filename"_day_*):
  filedate=${i##*_}; filedateday=$((filedate/86400))
  if [[ $((today-filedateday)) -gt 1 ]]; then week && mv $i ${i/day/week}; fi
}

week () {
for i in $(ls $base/"$filename"_week_*):
  filedate=${i##*_}; filedateday=$((filedate/86400))
  if [[ $((today-filedateday)) -gt 7 ]]; then month && mv $i ${i/week/month}; fi
}

month () {
for i in $(ls $base/"$filename"_month_*):
  filedate=${i##*_}; filedateday=$((filedate/86400))
  if [[ $((today-filedateday)) -gt 30 ]]; then year && mv $i ${i/week/year}; fi
}

year () { file=$(ls $base/"$filename"_year_* if [[ $file ]]; then rm $file; }
END

